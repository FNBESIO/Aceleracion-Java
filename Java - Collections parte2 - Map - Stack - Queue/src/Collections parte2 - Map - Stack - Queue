
	                                        ● STACK (PILA) y QUEUE (COLA)
											  ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
En el desarrollo de aplicaciones se nos puede presentar la necesidad de implementar un sistema de colas y/o pilas. Representan
una estructura lineal de objetos, en los que se pueden agregar o eliminar los elementos únicamente por uno de los dos extremos.
Los elementos de una Cola (queue) se eliminan de la colección en la misma forma en que fueron insertados, a esta estructura se
les conoce como FIFO (First In, First Out).
Los elementos de una Pila (stack) se eliminan de la colección en el orden inverso al que se insertaron, a esta estructura se
conoce como LIFO (Last Input, First Out).
Para las pilas se creo la clase STACK y para las colas existe la interfaz QUEUE.


● CLASE STACK (PILA)
  ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
LIFO => Last In First Out => El último elemento en agregarse a la Pila (apilar), sera el primer elemento que saldra (desapilar).
Como por ejemplo una pila de platos. Solo se pueden agregar elementos al final de la pila, y solo se puede sacar
elementos del final de la pila. El último que ingresa, es el primero en salir.
Para apilar utlizaremos el comando 'pila.add()' o 'pila.push()' y para desapilar utilzaremos el comando 'pila.pop()'.
La Clase Stack Hereda de la Clase Vector que implementa a la Interface List.

 →→→ 
     ↓
      *D →→→ (Ultimo en entrar, Primero en salir)
    | *C  |  
    | *B  |  
    | *A  |  
    -------
En este caso *D es el último elemento que se agregó (apilo), y es el primer elemento que se puede sacar (desapilar).


● INTERFAZ QUEUE (COLA)
  ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨ 
Los elementos de una cola (o fila) se eliminan de la colección en el mismo orden en que fueron insertados. A esta estructura
se la conoce como FIFO (First In, First Out). Como por ejemplo una clásica fila de espera de atención. La primer persona en
hacer la fila, será la primera persona que van a atender. El primero que entra, es el primero que sale.
Para ingresar un elemento en la cola (encolar) utlizaremos el comando 'fila.offer()' y para sacar el primer elemento
(desencolar) utilzaremos el comando 'fila.poll()'.

 *F
  ↓  _______________
  ↓
 *E → *D → *C → *B →→*A (primero en entrar, primero en salir)
     _______________


              QUEUE (Interfaz)
    _ _ _ _ _ _ ↓ _ _ _ _ _ _	 
    ↓                        ↓
  Deque (Interfaz)     AbstractQueue     
    ↓                        ↓              
 ArrayDeque            PriorityQueue                                                                                                   


• La interfaz QUEUE tiene una peculiaridad y es que ofrece métodos para poder trabajar con Colas (Queue en Ingles). 
 
- Métodos Queue
Adicionalmente de los métodos que nos proporciona la interfaz Collection, Queue añade unos nuevos:

Tipo         Método         Descripción
E           element()       Devuelve el elemento que se encuentre al principio de la cola.
boolean     offer(E e)      Inserta un elemento al final de la cola.
E           peek()          Elimina el elemento que se encuentre al principio de la cola.
E           poll()          Elimina el elemento que se encuentre al principio de la cola.


● INTERFAZ MAP
  ¨¨¨¨¨¨¨¨¨¨¨¨
La interfaz Map permite representar un Vector asociativo. Es decir, nos va a permitir generar un contenedor donde cada valor
tendra su clave asociada para poder ser identificado más eficientemente.
En el desarrollo de aplicaciones muchas veces vamos a querer representar los objetos en una estructura que permita la búsqueda
de forma fácil a través de una CLAVE (key), sin necesidad de recorrer toda la colección. En Java la interfaz Map nos permite
almacenar elementos asociando a cada VALOR(value) una CLAVE(key).
La clave podra ser cualquier tipo de dato, desde un integer, String o un objeto. En el caso de utilzar valores númerico como
clave, se debe utilzar los wrappers y no datos primitivos (por ejemplo int => Integer), ya que se esta trabajando con
<Generics>.

Map <key,value> id_map;
id_map = new Map_Implementación();

La interfaz Map NO ADMITE CLAVES DUPLICADAS y es especialmente útil para ir almacenando datos sin la preocupación de que alguna
de las claves tenga más de un valor asociado. Es importante igualmente recordar que se puede asignar un mismo valor a
diferentes claves, pero cada clave tendrá únicamente un valor. Si tratamos de agregar un nuevo valor a una clave ya existente,
lo que hace Map es sobreescribir el valor asociado de esa clave por el nuevo valor.
Si bien Map y sus implementaciones, no pertenecen a las Collections, la Interface Map tambien está estructuradas en una
jerarquía similar.
Los mapas permiten tanto claves como valores nulos, pero recordando que los Mapas no permiten claves duplicadas,
solo puede existir un valor asociado a una clave nula.

					Object
                      ↓
                     Map (Interfaz)
              _ _ _ _ ↓ _ _ _ _
             ↓                 ↓
(Interfaz)SortedMap       AbstractMap
            ↓                  ↓
          TreeMap           HashMap
                               ↓
                          LinkedHashMap

- Métodos Map

Tipo                Método                      Descripción
boolean             isEmpty()                   Devuelve verdadero si este Mapa no contiene elementos.
void                clear()                     Elimina todos los elementos del mapa.
Int                 size()                      Devuelve el número de elementos del mapa.
V                   put(K key, V value)         Asocia el valor especificado con la clave especificada en este mapa, si existía ya
                                                la clave reemplaza el valor y retorna el objeto reemplazado.
void                putAll(Map<? extends K,?    Agrega todos los elementos del mapa especificado a este mapa.
                    extends V> m)
V                   get(Object key)             Devuelve el valor que contenga la clave especificada o null si no existe.
boolean             containsKey(Object key)     Devuelve verdadero si este mapa contiene la clave especificada.
boolean             containsValue(Object value) Devuelve verdadero si este mapa contiene el objeto especificado.
boolean             equals(Object o)            Compara el objeto especificado con esta colección para la igualdad.
int                 hashCode()                  Devuelve el valor del código hash para esta colección.
V                   remove(Object key)          Elimina la asignación de una clave de este mapa si esta presenta y retorna el valor
                                                eliminado.
Set<Map.Entry<K,V>> entrySet()                  Devuelve una vista de colección del mapa en una colección
Collection<V>       values()                    Devuelve una colección con los objetos del mapa.
Set<K>              keySet()                    Devuelve en una colección Set las claves del mapa.



● HashMap
Este implementación almacena los elementos en una tabla hash, este acceso hace que esta clase sea ideal para búsqueda,
inserción y borrado de elementos.
Representa un par clave, valor donde las claves son únicas (no puede tener claves duplicadas ) SIN ORDENAR y tiene una
iteración más rápida que las otras implementaciones. Es decir, es la implementación más veloz pero NO CONSERVA EL ORDEN
INGRESO de los elementos. La implementación Hashtable funciona igual que HashMap pero es LEGACY (obsoleta).

● LinkedHashMap
Esta implementación almacena los elementos en función del orden de inserción lo que la hace un poco más costosa que HashMap.
Define el concepto de elementos añadiendo una lista doblemente enlazada en la ecuación que nos asegura que los elementos siempre
se recorren de la misma forma. Es decir, almacena Elementos en una lista (clave, valor) enlazada por ORDEN DE INGRESO.

● TreeMap
Esta implementación almacena los elementos ordenándolos en función de sus Claves en una estructura tipo arbol rojo – negro por
ORDEN NATURAL (alfabético), por lo que es bastante más lento que HashMap pero GARANTIZA UN ORDEN que podrá ser NATURAL
(alfabético) o ALTERNATIVO (definido). En el caso de utilizar una clase propia como clave se deberá implementar la interface
Comparable para poder indicar el orden.
