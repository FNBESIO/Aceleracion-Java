
    												● ARRAYS / ARREGLOS:
  													  ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
    Un 'array o arreglo' es un conjunto de variables indexadas, y que a su vez que forman una sola "variable" (super variable).
    El conjunto de variables deben ser del mismo tipo de dato para poder agruparse. Dicho conjunto estará agrupado bajo un
    mismo 'Nombre_Array'. Se podran distinguir internamente una variable de otra, por un número único que indacara la posición
    que ocupa la variable dentro del 'Array' (índice). Este concepto también es conocido como VECTOR. En todos los Arrays siempre
    la primer posicion sera la número 0. El tamaño que va a ocupar el array en memoria se establece cuando se crea.

                   ' ARRAY []'
    0   |(datos)|   variable1
    1   |       |   variable2
    2   |       |   variable3
    3   |       |   variable4
    4   |       |   variable5
    5   |       |   variable6
    ... ....        .....
    N   |       |   variableN

    .Sintaxis:
    . Mediante los corchetes vamos a indicar que se creando un array, Al momento de inicalizar el array se indica la cantidad de
    variables que va a tener.
        tipo_de_dato [] id_Array;
        id_Array = new tipo_de_dato [n°]

    . También se puede declarar un array en una sola línea:
        tipo de dato [] identificador = new tipo de dato [n°]


    • INGRESO DE DATOS EN UNA VARIABLE DENTRO DEL ARRAY:
  	  ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
    Para guardar un dato en una de las variables del array, hay que referirse a dicha variable con el nombre del array
    con el índice entre corchetes []. En todos los Arrays la primer posicion de variable siempre sera la numero [0].
    Si se ingresa un [subfijo] inexistente obtendremos un error en tiempo de ejecución.

    . Sintaxis:

    id_Array [sub_indice] = valor;

    . Creación de array, con valores incializados.

    tipo de dato [] identificador = {dato1 , dato2, dato3, dato4... datoN};
                                        0       1      2      3        N

   	• ' array.length ' :

    Todos los arrays tienen un campo interno llamado 'LENGTH' que nos dara la longitud del array, es decir, la cantidad de
    datos internos que lo componen. En otras palabras el tamaño del 'Array' puede obtenerse utilizando la propiedad
    'id_array.length.'


    • VISUALIZACION DE UN ARRAY CON 'FOR':
    En el array se guarda la información de la 'ubicación' en la que se encuentra ese conjunto de variables en memoria. Es importante
    distinguir que los 'datos' no estan guardados en el array, sino que los datos estan	guardados en variables de la vemoria Ram y
    la única información que esta guardada en el array es la ubicación en memoria.
    Resulta evidente que recorrer todas las posiciones de un array de una forma manual seria muy poco práctico, y es por motivo que se
    recurre a los iteradores para poder recorrer un array. Por ejemplo, si utilzamos un 'for' y mediante su mismo iterador interno se
    puede automatizar [i] para que este pase por todos las posiciones que tiene el array.

    for (int i, i < array.length, i++){
        System.out.println(array[i])
    }

